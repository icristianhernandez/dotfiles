---
name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  filter:
    name: Path filter
    runs-on: ubuntu-latest
    outputs:
      nvim: ${{ steps.filter.outputs.nvim }}
      nixos: ${{ steps.filter.outputs.nixos }}
      github_workflows: ${{ steps.filter.outputs.github_workflows }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Filter changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            nvim:
              - 'nvim/**'
            nixos:
              - 'nixos-wsl/**'
            github_workflows:
              - '.github/workflows/**'
              - '.github/workflows/*.yml'
              - '.github/workflows/*.yaml'

  nvim-format:
    name: "Neovim: Stylua format check"
    runs-on: ubuntu-latest
    needs: filter
    if: ${{ needs.filter.outputs.nvim == 'true' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v20
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v13

      - name: Stylua format check
        run: |
          if [ -f nvim/.config/nvim/.stylua.toml ]; then
            echo "Using repository Stylua config"
            nix run nixpkgs#stylua -- --check --output-format=unified --config-path nvim/.config/nvim/.stylua.toml nvim/.config/nvim
          else
            echo "No repository Stylua config found; using Stylua defaults"
            nix run nixpkgs#stylua -- --check --output-format=unified nvim/.config/nvim
          fi

  nixos-check:
    name: "NixOS: flake format & checks"
    runs-on: ubuntu-latest
    needs: filter
    if: ${{ needs.filter.outputs.nixos == 'true' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v20
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v13

      - name: Run flake checks
        run: nix flake check ./nixos-wsl -L

  github-workflows-lint:
    name: "GitHub Workflows: Actionlint & yamllint"
    runs-on: ubuntu-latest
    needs: filter
    if: ${{ needs.filter.outputs.github_workflows == 'true' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v20
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v13

      - name: Run actionlint (GitHub Actions linter)
        run: |
          echo "Finding workflow files..."
          shopt -s nullglob
          files=( .github/workflows/*.yml .github/workflows/*.yaml )
          if [ ${#files[@]} -eq 0 ]; then
            echo "No workflow files found; skipping actionlint"
          else
            echo "Workflow files:"
            printf '%s\n' "${files[@]}"
            echo "Running actionlint against workflow files"
            nix run nixpkgs#actionlint -- "${files[@]}" || { echo "actionlint failed"; exit 1; }
          fi

      - name: Run yamllint (YAML syntax and style)
        run: |
          echo "Finding workflow files..."
          shopt -s nullglob
          files=( .github/workflows/*.yml .github/workflows/*.yaml )
          if [ ${#files[@]} -eq 0 ]; then
            echo "No workflow files found; skipping yamllint"
          else
            echo "Workflow files:"
            printf '%s\n' "${files[@]}"
            echo "Running yamllint against workflow files"
            nix run nixpkgs#yamllint -- "${files[@]}" || { echo "yamllint failed"; exit 1; }
          fi
